package bot

import (
	"fmt"
	"log"
	"strings"

	"github.com/SobolevTim/secret-santa-bot/internal/cache"
	"github.com/SobolevTim/secret-santa-bot/internal/database"
	"github.com/SobolevTim/secret-santa-bot/internal/game"
	"github.com/mymmrac/telego"
)

const (
	participantStart            = "await_user_status"      // –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ —Å –≤–≤–µ–¥–µ–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
	awaitParticipantName        = "await_user_name"        // –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —É—á–∞—Å—Ç–∏–Ω–∏–∫–∞
	awaitParticipantPreferences = "await_user_preferences" // –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –æ—Ç —É—á–∞—Å—Ç–∏–Ω–∏–∫–∞
	organizerGameName           = "await_name_game"        // –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
	organizerGameDescription    = "await_game_description" // –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä—ã
)

func (b *Bot) handleMessage(msg *telego.Message, service *database.Service, cache *cache.Cache) {
	userID := msg.From.ID
	state, _, cacheOK := cache.Get(userID)
	if strings.HasPrefix(msg.Text, "/") {
		b.handleCommand(msg, service, cache)
	} else if strings.HasPrefix(msg.Text, "santa-game:") {
		b.handleParticipantGame(msg, service, cache)
	} else if cacheOK {
		switch state {
		case participantStart:
			b.handleParticipantIsStart(msg, cache)
		case awaitParticipantName:
			b.hadleInsertParticipantName(msg, service, cache)
		case awaitParticipantPreferences:
			b.handleEndFillParticipant(msg, service, cache)
		case organizerGameName:
			b.handleOrganizerGameDescription(msg, cache)
		case organizerGameDescription:
			b.handleOrganizerGameCreate(msg, service, cache)
		}
	}
}

func (b *Bot) handleCommand(msg *telego.Message, service *database.Service, cache *cache.Cache) {
	switch msg.Text {
	case "/start":
		b.handleStart(msg)
	case "/help":
		b.handleHelp(msg)
	case "/cancel":
		b.handleCancel(msg, cache)
	case "/mygames":
		b.handleMyGames(msg, service)
	case "/game":
		b.handleGame(msg, cache)
	// –¥–æ–±–∞–≤–∏—Ç—å /giftee,
	default:
		b.SendMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
	}
}

func (b *Bot) handleStart(msg *telego.Message) {
	message := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã.\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–¥ —É—á–∞—Å—Ç–∏–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–∏—Å–ª–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥!", msg.From.FirstName)
	b.SendMessage(msg.Chat.ID, message)
	message = "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–≥—Ä—É - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /game"
	b.SendMessage(msg.Chat.ID, message)
}

func (b *Bot) handleHelp(msg *telego.Message) {
	message := "–Ø –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ—Ç, –¥–ª—è –∏–≥—Ä—ã \"–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞\".\n–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥. –ö–æ–¥ —Ç–µ–±–µ –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã.\n\n–ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
	cmd := "/cancel - –æ—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π, –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª –∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å —á—Ç–æ —Ö–æ—á–µ—Ç –±–æ—Ç\n/game - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏–ª–∏ –∫–æ–ª–ª–µ–≥.\n/mygames - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å."
	b.SendMessage(msg.Chat.ID, message+cmd)
}

func (b *Bot) handleCancel(msg *telego.Message, cache *cache.Cache) {
	message := "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /help –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ."
	b.SendMessage(msg.Chat.ID, message)
	cache.ClearUser(msg.Chat.ID)
}

func (b *Bot) handleMyGames(msg *telego.Message, service *database.Service) {
	games, err := service.GetGamesParticipant(database.Participant{UserID: msg.From.ID})
	if err != nil {
		b.SendMessage(msg.Chat.ID, "–û–π! üò±\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!")
		log.Printf("ERROR: %v", err)
		return
	}
	var message string
	if games == nil {
		message = "–ü–æ–∫–∞ —Ç—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∏ –≤ –∫–∞–∫–∏—Ö –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ –≤ –∏–≥—Ä–µ —É–∂–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∂–µ—Ä–µ–±—å–µ–≤–∫–∞. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç–≤–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –≤ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∏–≥—Ä–µ - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /giftee"
	} else {
		message = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏:"
		for _, game := range games {
			//token, name, description
			text := fmt.Sprintf("\n\ntoken –∏–≥—Ä—ã: %s\n–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: %s\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã: %s", game.Token, game.Name, game.Description)
			message += text
		}
	}
	b.SendMessage(msg.Chat.ID, message)
}

func (b *Bot) handleGame(msg *telego.Message, cache *cache.Cache) {
	message := "–¢—ã —Å–æ–∑–¥–∞–µ—à—å —Å–≤–æ—é –∏–≥—Ä—É \"–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞\".\n–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–û—Ñ–∏—Å–Ω—ã–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞\") –∏–ª–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞/—Å–ª—É–∂–±—ã, —á—Ç–æ–±—ã –∫–æ–ª–ª–µ–≥–∞–º –±—ã–ª–æ –ø—Ä–æ—â–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /cancel"
	cache.Set(msg.From.ID, organizerGameName, "")
	b.SendMessage(msg.From.ID, message)
}

func (b *Bot) handleParticipantGame(msg *telego.Message, service *database.Service, cache *cache.Cache) {
	token := msg.Text
	ok, game, err := service.CheckGameCodeParticipant(database.Game{Token: token})
	if err != nil {
		b.SendMessage(msg.Chat.ID, "–û–π! üò±\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!")
		log.Printf("ERROR: %v", err)
		return
	}
	if !ok {
		b.SendMessage(msg.Chat.ID, "–•–º–º ü§î –ü–æ—Ö–æ–∂–µ —á—Ç–æ –∏–≥—Ä—ã —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ù–∞–ø–∏—à–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª —ç—Ç–æ—Ç –∫–æ–¥, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª –∏–≥—Ä—É –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª –∫–æ–¥ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
		return
	}
	message := fmt.Sprintf("–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞, —É—Ä–∞!üéâ\n–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã %s\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã: %s", game.Name, game.Description)
	b.SendMessage(msg.From.ID, message)
	message = "–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É, –Ω–∞–ø–∏—à–∏ –º–Ω–µ: –ù–∞—á–∏–Ω–∞–µ–º\n\n–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ —ç—Ç–æ–π –∏–≥—Ä–µ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ: –û—Ç–º–µ–Ω–∞"
	cache.Set(msg.From.ID, participantStart, token)
	b.SendMessage(msg.From.ID, message)
}

func (b *Bot) handleParticipantIsStart(msg *telego.Message, cache *cache.Cache) {
	_, token, _ := cache.Get(msg.From.ID)
	text := strings.ToLower(strings.TrimSpace(msg.Text))
	var message string
	switch text {
	case "–Ω–∞—á–∏–Ω–∞–µ–º":
		cache.Set(msg.From.ID, awaitParticipantName, token)
		message = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–µ –∏–º—è!\n–¢–≤–æ–µ –∏–º—è —É–≤–∏–¥–∏—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞.\n–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è, –ª–∏–±–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞—é—Ç –≤—Å–µ —É—á–∞—Å—Ç–∏–Ω–∏–∫–∏ –≤–∞—à–µ–π –∏–≥—Ä—ã –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É, –∏–Ω–∞—á–µ –°–∞–Ω—Ç–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∏–Ω–¥–∏–≤—É–¥–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫."
	case "–æ—Ç–º–µ–Ω–∞":
		cache.ClearUser(msg.From.ID)
		message = "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É.\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ —É—á–∞—Å—Ç–∏–Ω–∏–∫–∞ –∑–∞–Ω–æ–≤–æ.\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /game"
	default:
		message = "–ù–µ –ø–æ–Ω—è–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üò¢\n–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É - –Ω–∞–ø–∏—à–∏: –ù–∞—á–∏–Ω–∞–µ–º\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å –∫ –∏–≥—Ä–µ - –Ω–∞–ø–∏—à–∏: –û—Ç–º–µ–Ω–∞"
	}
	b.SendMessage(msg.From.ID, message)
}

func (b *Bot) hadleInsertParticipantName(msg *telego.Message, service *database.Service, cache *cache.Cache) {
	p := database.Participant{
		UserID:    msg.From.ID,
		Username:  msg.From.Username,
		FirstName: msg.From.FirstName,
		LastName:  msg.From.LastName,
		Name:      msg.Text,
	}
	_, token, _ := cache.Get(msg.From.ID)
	err := service.CreateParticipant(p, token)
	if err != nil {
		b.SendMessage(msg.Chat.ID, "–û–π! üò±\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!")
		log.Printf("ERROR: %v", err)
		return
	}
	message := fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ, %s - —Ç–≤–æ–µ –∏–º—è\n–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É\n\n–ò–º—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–æ –Ω–∞—á–∞–ª–∞ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ –µ—â–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å. –ß—É—Ç—å –ø–æ–∑–∂–µ —è –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.", msg.Text)
	cache.Set(msg.From.ID, awaitParticipantPreferences, token)
	b.SendMessage(msg.From.ID, message)

}

func (b *Bot) handleEndFillParticipant(msg *telego.Message, service *database.Service, cache *cache.Cache) {
	_, token, _ := cache.Get(msg.From.ID)
	err := service.UpdateParticipantPrefences(database.Participant{GiftPreferences: msg.Text}, token)
	if err != nil {
		b.SendMessage(msg.Chat.ID, "–û–π! üò±\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!")
		log.Printf("ERROR: %v", err)
		return
	}
	message := fmt.Sprintf("%s - —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É. –£–≤–µ—Ä–µ–Ω, —á—Ç–æ –¢–∞–Ω—ã–π –°–∞–Ω—Ç–∞ –∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ—Ç", msg.Text)
	cache.ClearUser(msg.From.ID)
	b.SendMessage(msg.From.ID, message)
	message = "–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç –∏–≥—Ä—É.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–π /help, —Ç–∞–º –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–≥—Ä—É."
	b.SendMessage(msg.From.ID, message)
}

func (b *Bot) handleOrganizerGameDescription(msg *telego.Message, cache *cache.Cache) {
	cache.Set(msg.From.ID, organizerGameDescription, msg.Text)
	message := fmt.Sprintf("%s - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∏–≥—Ä—ã.\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–π /cancel", msg.Text)
	b.SendMessage(msg.From.ID, message)
}

func (b *Bot) handleOrganizerGameCreate(msg *telego.Message, service *database.Service, cache *cache.Cache) {
	_, name, _ := cache.Get(msg.From.ID)
	token, err := game.GenerateGameCode(*service)
	if err != nil {
		b.SendMessage(msg.Chat.ID, "–û–π! üò±\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!")
		log.Printf("ERROR: %v", err)
		return
	}
	g := database.Game{
		Token:       token,
		OrganizerID: msg.From.ID,
		Name:        name,
		Description: msg.Text,
	}
	err = service.CreateGame(g)
	if err != nil {
		b.SendMessage(msg.Chat.ID, "–û–π! üò±\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!")
		log.Printf("ERROR: %v", err)
		return
	}
	message := fmt.Sprintf("–¢—ã —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: %s\n–û–ø–∏—Å–∞–Ω–∏–µ–º: %s\n–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–≤–æ–µ–π –∏–≥—Ä–µ - –æ—Ç–ø—Ä–∞–≤—å –∏–º —ç—Ç–æ—Ç –∫–æ–¥:\n%s", g.Name, g.Description, g.Token)
	cache.ClearUser(msg.From.ID)
	b.SendMessage(msg.From.ID, message)
}
